version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: blog-system-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: blog_system
      MYSQL_USER: bloguser
      MYSQL_PASSWORD: blogpass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - blog-network
    command: --default-authentication-plugin=mysql_native_password

  # Spring Boot Application
  blog-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: blog-system-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/blog_system?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: bloguser
      SPRING_DATASOURCE_PASSWORD: blogpass
    depends_on:
      - mysql
    networks:
      - blog-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (Optional - if you want to containerize frontend too)
  blog-frontend:
    image: nginx:alpine
    container_name: blog-system-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - blog-backend
    networks:
      - blog-network

volumes:
  mysql_data:
    driver: local

networks:
  blog-network:
    driver: bridge